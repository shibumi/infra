package internal

import (
	"reflect"
	"testing"
)

func TestReadSSHPublicKey(t *testing.T) {
	type args struct {
		path string
	}
	tests := []struct {
		name    string
		args    args
		want    *SSHPublicKey
		wantErr bool
	}{
		{
			name: "test key1",
			args: args{
				path: "../test/key1.pub",
			},
			want: &SSHPublicKey{
				Bytes: []byte{0, 0, 0, 7, 115, 115, 104, 45, 114, 115, 97, 0, 0, 0, 3, 1, 0, 1, 0, 0, 2, 1, 0, 199, 149, 23, 240, 33, 138, 154, 169,
					103, 225, 228, 230, 233, 9, 94, 105, 3, 233, 254, 42, 137, 74, 235, 130, 217, 229, 92, 136, 139, 150, 99, 194, 209, 44, 194,
					64, 200, 232, 167, 6, 13, 49, 156, 89, 134, 62, 253, 114, 120, 218, 72, 251, 73, 182, 7, 72, 41, 184, 183, 241, 192, 92, 120,
					38, 40, 59, 144, 63, 58, 187, 218, 117, 88, 236, 109, 67, 141, 138, 192, 172, 104, 160, 246, 120, 180, 253, 112, 137, 99,
					174, 44, 230, 128, 96, 91, 204, 21, 61, 57, 219, 127, 252, 24, 163, 232, 7, 170, 197, 206, 237, 150, 137, 42, 73, 214, 238,
					60, 155, 152, 136, 140, 11, 216, 113, 248, 25, 6, 186, 12, 147, 217, 103, 85, 156, 143, 252, 125, 120, 145, 237, 80, 64, 173,
					39, 207, 33, 63, 226, 122, 229, 162, 248, 100, 127, 238, 114, 51, 233, 125, 61, 119, 190, 233, 99, 235, 89, 205, 227,
					159, 110, 109, 168, 109, 77, 196, 176, 136, 124, 40, 156, 232, 101, 231, 168, 166, 163, 133, 159, 26, 40, 76, 107, 100, 222,
					39, 203, 241, 43, 245, 231, 130, 131, 204, 252, 17, 157, 161, 138, 119, 7, 119, 233, 169, 99, 66, 22, 171, 1, 73, 17, 65, 45,
					219, 85, 152, 145, 199, 82, 112, 215, 223, 181, 93, 61, 26, 243, 240, 251, 210, 41, 64, 40, 197, 250, 138, 85, 26, 248, 179,
					189, 140, 230, 221, 227, 218, 84, 74, 43, 85, 24, 222, 160, 29, 94, 75, 7, 38, 219, 94, 55, 90, 45, 238, 182, 116, 223, 96, 70,
					219, 73, 219, 130, 163, 160, 151, 171, 214, 141, 143, 49, 28, 77, 198, 60, 6, 130, 75, 15, 94, 23, 50, 124, 24, 27, 198, 99, 78,
					158, 193, 152, 103, 221, 15, 21, 218, 119, 8, 125, 222, 135, 213, 124, 194, 108, 35, 252, 4, 207, 157, 125, 44, 238, 144, 21,
					34, 146, 109, 234, 91, 221, 49, 250, 25, 161, 236, 214, 134, 79, 205, 209, 237, 6, 164, 181, 156,
					238, 25, 161, 198, 97, 15, 208, 102, 41, 231, 234, 11, 47, 137, 249, 192, 106, 247, 246, 227, 172, 140, 247, 170, 167, 30,
					92, 249, 2, 79, 128, 137, 52, 112, 154, 74, 91, 200, 21, 59, 14, 83, 241, 238, 246, 191, 170, 248, 224, 3, 242, 247, 229, 203,
					79, 29, 171, 3, 7, 202, 121, 48, 112, 201, 10, 63, 202, 33, 145, 163, 232, 4, 118, 179, 209, 56, 233, 125, 109, 232, 190, 120,
					97, 64, 164, 146, 237, 28, 241, 170, 48, 254, 79, 204, 202, 88, 212, 14, 187, 207, 112, 248, 181, 159, 51, 62, 130, 42, 14,
					138, 44, 228, 238, 164, 211, 134, 151, 145, 177, 227, 52, 35, 164, 111, 6, 54, 244, 247, 234, 103, 58, 153, 152, 74, 62, 20,
					96, 192, 134, 172, 51, 165, 247, 63, 237, 238, 239, 12, 148, 203, 90, 235, 8, 199, 22, 154, 57},
				Comment: "chris@motoko",
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := ReadSSHPublicKey(tt.args.path)
			if (err != nil) != tt.wantErr {
				t.Errorf("ReadSSHPublicKey() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("ReadSSHPublicKey() got = %v, want %v", got, tt.want)
			}
		})
	}
}
